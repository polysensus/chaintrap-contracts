---
version: '3'
env:
  ENV: '{{.ENV | default ".local/dev" }}'
  PROFILE: '{{.PROFILE | default ""}}'
  DEPLOYCLI: "node node_modules/@polysensus/diamond-deploy/dist/deploycli.esm.js"

dotenv: [".env", '{{.ENV}}/.env', '{{.HOME}}/.env']

vars:
  # The input file for diamond-deploy --exclu
  FACETS_EXCLUDE: abi/facets-exclude.json
  DIAMOND_DEPLOY_JSON: '{{.ENV}}/diamond-deploy.json'
  CICD_DEV_CURL: "curl -s -H 'Accept: application/vnd.github.v3.raw' -L https://api.github.com/repos/polysensus/cicd-dev-infra/contents"
  TUSKS: ".local/dev"

# tasks are primarily for actions local to this repository. task is for things
# that usually don't need options (or can be configured once via a .env) use it
# especially when you have things that depend on other things

tasks:

  bootstrap:
    desc: fetch the shared cicd development infra we use here
    cmds:
      - |
        mkdir -p {{.TUSKS}}
        cd {{.TUSKS}}
        {{.CICD_DEV_CURL}}/js/tusk-jspkg.yml?ref=v0.0.2 -O

  release:patch:
    desc: create patch release
    cmds:
      - |
        tusk -q -f {{.TUSKS}}/tusk-jspkg.yml version-update {{.CLI_ARGS}}

  format:
    desc: format all the sources (javascript and solidity using prettier)
    cmds:
      - |
        npx prettier --write 'chaintrap/**/*.sol'
        npx prettier --write 'lib/**/*.sol'
        npx prettier --write  'scripts/**/*.sol'
        npx prettier --write  'chaintrap/**/*.{js,mjs}'
        npx prettier --write  'tests/hh/**/*.{js,mjs}'


  build:
    desc: build the npm package
    cmds:
      - task: format
      - task: build:contracts
      - task: build:types
      - npx rollup -c

  verify:diamond:sourcify:
    desc: verify the contracts
    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        # Diamond constructor args abi like this

        CONSTRUCTOR_ARGS=0x000000000000000000000000b179a6f44472a0446e003117dc870b5c99ccea22000000000000000000000000e2205b98c12c5c2f5e58299e7ef2247215cfbef6
        CONSTRUCTOR_ARGS=$(cast abi-encode "constructor(address,address)" $(cat .local/dev/arena-owner.addr) 0xe2205b98c12c5c2f5e58299e7ef2247215cfbef6)
        echo $CONSTRUCTOR_ARGS
        forge verify-contract \
          --constructor-args $CONSTRUCTOR_ARGS \
          --chain 420 \
          --watch \
            0x0c075885e9EBB701997bA3e1B8D291688Dc0bCEE \
            chaintrap/diamond/Diamond.sol:Diamond \
          --verifier sourcify

  verify:diamond:
    dotenv: [".env.op"]
    desc: verify the contracts
    vars:
      CONTRACT_ADDRESS: "0xeeabb17a56bd072b4e7b0a54c3e17B3605cB019F"
      CONTRACT_ADDRESS_JULY23: "0x0c075885e9EBB701997bA3e1B8D291688Dc0bCEE"
      CUTTER_FACET_ADDRESS: "0x986C13F497FE940707892c59030c04773DC0Fa08"

    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        # Diamond constructor args abi like this

        CONSTRUCTOR_ARGS=0x000000000000000000000000b179a6f44472a0446e003117dc870b5c99ccea22000000000000000000000000e2205b98c12c5c2f5e58299e7ef2247215cfbef6
        CONSTRUCTOR_ARGS=$(cast abi-encode "constructor(address,address)" $(cat .local/dev/arena-owner.addr) {{.CUTTER_FACET_ADDRESS}})
        echo $CONSTRUCTOR_ARGS
        forge verify-contract \
          --constructor-args $CONSTRUCTOR_ARGS \
          --chain 420 \
          --watch \
            {{.CONTRACT_ADDRESS}}  \
            chaintrap/diamond/Diamond.sol:Diamond \
          --verifier etherscan \
          --verifier-url $ARENASTATE_ETHERSCAN_URL \
          --etherscan-api-key=$ARENASTATE_ETHERSCAN_API_KEY


  verify:erc1155arenafacet:
    desc: verify the contracts
    dotenv: [".env.op"]
    vars:
      CONTRACT_ADDRESS: "0xeE3e8972cfbC2D75cdB6cFc7e50Ad60d80E707a2"
      CONTRACT_ADDRESS_JULY23: "0x8af7c7d19857a3596f735f5daff729291e9ceff0"
    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        # Diamond constructor args abi like this

        echo $CONSTRUCTOR_ARGS
        forge verify-contract \
          --chain 420 \
          --watch \
            {{.CONTRACT_ADDRESS}}  \
            chaintrap/facets/arena/ERC1155ArenaFacet.sol:ERC1155ArenaFacet \
          --verifier etherscan \
          --verifier-url $ARENASTATE_ETHERSCAN_URL \
          --etherscan-api-key=$ARENASTATE_ETHERSCAN_API_KEY



  verify:arenafacet:
    desc: verify the contracts
    dotenv: [".env.op"]
    vars:
      CONTRACT_ADDRESS: "0x53033C2673585d484694c8ee2D00bad3E842baE7"
      CONTRACT_ADDRESS_JULY23: "0x2603add762a2ab348329792b10a893194a075ab2"
    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        forge verify-contract \
          --chain 420 \
          --watch \
            {{.CONTRACT_ADDRESS}}  \
            chaintrap/facets/arena/ArenaFacet.sol:ArenaFacet \
          --verifier etherscan \
          --verifier-url $ARENASTATE_ETHERSCAN_URL \
          --etherscan-api-key=$ARENASTATE_ETHERSCAN_API_KEY

  verify:loupefacet:
    desc: verify the contracts
    dotenv: [".env.op"]
    vars:
      CONTRACT_ADDRESS: "0xddd7A4df943c0697e9a1C0e4a13D979f6a954BBF"
      CONTRACT_ADDRESS_JULY23: "0xe2205b98c12c5c2f5e58299e7ef2247215cfbef6"
    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        forge verify-contract \
          --chain 420 \
          --watch \
            {{.CONTRACT_ADDRESS}}  \
            chaintrap/diamond/facets/DiamondLoupeFacet.sol:DiamondLoupeFacet \
          --verifier etherscan \
          --verifier-url $ARENASTATE_ETHERSCAN_URL \
          --etherscan-api-key=$ARENASTATE_ETHERSCAN_API_KEY

  verify:cutfacet:
    desc: verify the contracts
    dotenv: [".env.op"]

    vars:
      CONTRACT_ADDRESS: "0x986C13F497FE940707892c59030c04773DC0Fa08"
      CONTRACT_ADDRESS_JULY23: "0xe2205b98c12c5c2f5e58299e7ef2247215cfbef6"
    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        forge verify-contract \
          --chain 420 \
          --watch \
            {{.CONTRACT_ADDRESS}}  \
            chaintrap/diamond/facets/DiamondCutFacet.sol:DiamondCutFacet \
          --verifier etherscan \
          --verifier-url $ARENASTATE_ETHERSCAN_URL \
          --etherscan-api-key=$ARENASTATE_ETHERSCAN_API_KEY


  verify:ownershipfacet:
    desc: verify the contracts
    dotenv: [".env.op"]
    vars:
      CONTRACT_ADDRESS: "0x02e3979935F2ecbE43C39F50457721E766D36216"
      CONTRACT_ADDRESS_JULY23: "0xc4f6daafbff38e57100abb4e5ce5025e82075622"
    cmds:
      - |
        # use https://louper.dev to inspect the facet addresses

        forge verify-contract \
          --chain 420 \
          --watch \
            {{.CONTRACT_ADDRESS}}  \
            chaintrap/diamond/facets/OwnershipFacet.sol:OwnershipFacet \
          --verifier etherscan \
          --verifier-url $ARENASTATE_ETHERSCAN_URL \
          --etherscan-api-key=$ARENASTATE_ETHERSCAN_API_KEY

  build:contracts:
    desc: build the contracts and prepare the abi and exclusions file
    cmds:
      - rm -rf abi && mkdir -p abi
      - mkdir -p .local/dev
      - forge build --sizes
      - task: build:facets-exclude
      - task: build:diamond-deploy
      - |
        echo "copying abi files from build"
        cp build/forge/out/Diamond.sol/Diamond.json abi/
        cp build/forge/out/DiamondNew.sol/DiamondNew.json abi/
        for d in $(ls -d build/forge/out/*Facet.sol); do cp $d/*Facet.json abi/; done
      
  build:types:
    desc: "generate typescript types using typechain"
    cmds:
      - |
        npx typechain \
        --glob "abi/**/*.json" \
        --target=ethers-v5 \
        --out-dir=types

  build:facets-exclude:
    desc: |
      re generate the current diamond deploy exclusions

      note: this command needs to be maintained to account for any new
      collisions introduces in future changes. facet:collisions can help with
      that.
    cmds:
      - |
        ${DEPLOYCLI} \
          select \
          --select-excluded -I facet -i build/forge/out \
          | tee {{.FACETS_EXCLUDE}}

  build:diamond-deploy:
    desc: generate the deployable list of facets
    cmds:
      - |
        ${DEPLOYCLI} \
          list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json | tee {{.DIAMOND_DEPLOY_JSON}}

  test:
    desc: run the forge and hardhat tests
    cmds:
      - task: test:forge
      - task: test:hh

  test:forge:
    desc: run the forge tests
    cmds:
      - forge test -vvv --ffi {{.CLI_ARGS}}

  test:hh:
    desc: run the hardhat tests
    cmds:
      - npx mocha --require esm --timeout 20000  'tests/**/*.{mjs,js}'  {{.CLI_ARGS}}

  deploy:
    cmds:
      - task: deploy-caimst
      - task: deploy-pol

  deploy-hh:
    cmds:
      - task: deploy-to
        vars: { RPC_URL: "http://localhost:8545" }

  deploy-caimst:
    cmds:
      - task: deploy-to
        vars: { RPC_URL: "https://chains.hoy.polysensus.io/chains/caimst-209301/node/ethnode0/WWdEOHJUNVFDRXpPZ0VDb1IxTVpYOmFyZ29uMmlkIDMgNjRNQiAzMi5Kdkt6cEU5U09HNW02a3RBXzViYk8yRFZNeUw3cXBEdm5vQjhlOEtQMk5rPS5pR2JMMXpDRzBxbVRKdnRUN2RkLURxWlhSbDkxTWlYQm1RNDlKVzhjOF9jPQ==" }

  deploy-pol:
    cmds:
      - task: deploy-to
        vars:
          PRIVATE_KEY:
            sh: cat .local/dev/wallet-deploy.key
          DEPLOYER_ADDR:
            sh: cat .local/dev/wallet-deploy.addr
          RPC_URL: "https://polygon-mumbai.g.alchemy.com/v2/zyiZCXLwVEOZPVoixfOBBVvp7KE1oiqf"

  deploy-to:
    desc: deploy the contracts
    cmds:
      - |
        PRIVATE_KEY='{{.PRIVATE_KEY | default "hardhat:0" }}'
        DEPLOYER_ADDR='{{.DEPLOYER_ADDR | default "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"}}'
        echo "PRIVATE_KEY: $PRIVATE_KEY"
        echo "DEPLOYER_ADDR: $DEPLOYER_ADDR"
        [ -z "$PRIVATE_KEY" ] && echo "no deployment key" && exit 1

        echo "RPC_URL: {{.RPC_URL}}" 
        echo "Deployer: $DEPLOYER_ADDR"
        CONTRACT=chaintrap/arena.sol:Arena
        forge create $CONTRACT \
          --legacy \
          --rpc-url={{.RPC_URL}} \
          --private-key=$PRIVATE_KEY \
          --gas-limit=5000000

  facet:collisions:
    desc: show the json formatted list of diamond facet collisions
    cmds:
      - |
        ${DEPLOYCLI} select \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --show-collisions --format json

  facet:list:
    desc: generate the deployable list of facets
    cmds:
      - |
        ${DEPLOYCLI} \
          list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json

  facet:list-names:
    desc: generate the deployable list of facets
    cmds:
      - |
        ${DEPLOYCLI} \
          list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json | jq -r .[].name | tr -s '\n' ' '
