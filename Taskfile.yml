---
version: '3'
silent: true
env:
  ENV: '{{.ENV | default ".local/dev" }}'
  PROFILE: '{{.PROFILE | default ""}}'
dotenv: [".env", '{{.ENV}}/.env', '{{.HOME}}/.env']

vars:
  # The input file for diamond-deploy --exclu
  FACETS_EXCLUDE: abi/facets-exclude.json
  DIAMOND_DEPLOY: '{{.ENV}}/diamond-deploy.json'
  CICD_DEV_CURL: "curl -s -H 'Accept: application/vnd.github.v3.raw' -L https://api.github.com/repos/polysensus/cicd-dev-infra/contents"
  TUSKS: ".local/dev"

# tasks are primarily for actions local to this repository. task is for things
# that usually don't need options (or can be configured once via a .env) use it
# especially when you have things that depend on other things

tasks:

  bootstrap:
    desc: fetch the shared cicd development infra we use here
    cmds:
      - |
        mkdir -p {{.TUSKS}}
        cd {{.TUSKS}}
        {{.CICD_DEV_CURL}}/js/tusk-jspkg.yml?ref=v0.0.2 -O


  release:fix:
    desc: create patch release fixing a problem
    cmds:
      - |
        tusk -q -f {{.TUSKS}}/tusk-jspkg.yml version-update {{.CLI_ARGS}}

  build:
    desc: build the npm package
    cmds:
      - task: build:contracts
      - npm run build

  build:contracts:
    desc: build the contracts and prepare the abi and exclusions file
    cmds:
      - mkdir -p abi
      - mkdir -p .local/dev
      - forge build --sizes
      - task: build:facets-exclude
      - task: build:diamond-deploy
      - task: facet:check
      - |
        echo "copying abi files from build"
        cp build/forge/out/Diamond.sol/Diamond.json abi/
        cp build/forge/out/DiamondNew.sol/DiamondNew.json abi/
        for d in $(ls -d build/forge/out/*Facet.sol); do cp $d/*Facet.json abi/; done
        cp build/forge/out/IERC1155Arena.sol/IERC1155Arena.json abi
        for d in $(ls -d build/forge/out/IArena*.sol); do cp $d/IArena*.json abi/; done

  build:facets-exclude:
    desc: |
      re generate the current diamond deploy exclusions

      note: this command needs to be maintained to account for any new
      collisions introduces in future changes. facet:collisions can help with
      that.
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i build/forge/out \
          --collisions-only --format json \
          | jq -r '[ .[] | select(.name=="ERC1155ArenaFacet") ]' \
          | tee {{.FACETS_EXCLUDE}} \
          || true

  build:diamond-deploy:
    desc: generate the deployable list of facets
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json | tee {{.DIAMOND_DEPLOY}}

  test:
    desc: run the forge and hardhat tests
    cmds:
      - task: test:forge
      - task: test:hh

  test:forge:
    desc: run the forge tests
    cmds:
      - forge test -vvv --ffi

  test:hh:
    desc: run the hardhat tests
    cmds:
      - npx mocha --require esm --timeout 20000  'tests/**/*.{mjs,js}'

  deploy:
    cmds:
      - task: deploy-caimst
      - task: deploy-pol

  deploy-caimst:
    cmds:
      - task: deploy-to
        vars: { RPC_URL: "https://chains.hoy.polysensus.io/chains/caimst-209301/node/ethnode0/WWdEOHJUNVFDRXpPZ0VDb1IxTVpYOmFyZ29uMmlkIDMgNjRNQiAzMi5Kdkt6cEU5U09HNW02a3RBXzViYk8yRFZNeUw3cXBEdm5vQjhlOEtQMk5rPS5pR2JMMXpDRzBxbVRKdnRUN2RkLURxWlhSbDkxTWlYQm1RNDlKVzhjOF9jPQ==" }

  deploy-pol:
    cmds:
      - task: deploy-to
        vars: { RPC_URL: "https://polygon-mumbai.g.alchemy.com/v2/zyiZCXLwVEOZPVoixfOBBVvp7KE1oiqf" }

  deploy-to:
    desc: deploy the contracts
    cmds:
      - |
        PRIVATE_KEY=$(cat .local/dev/wallet-deploy.key)
        DEPLOYER_ADDR=$(cat .local/dev/wallet-deploy.addr)
        echo "PRIVATE_KEY: $PRIVATE_KEY"
        [ -z "$PRIVATE_KEY" ] && echo "no deployment key, try new-deploy-wallet" && exit 1

        echo "RPC_URL: {{.RPC_URL}}" 
        echo "Deployer: $DEPLOYER_ADDR"
        CONTRACT=chaintrap/arena.sol:Arena
        forge create $CONTRACT \
          --legacy \
          --rpc-url={{.RPC_URL}} \
          --private-key=$PRIVATE_KEY \
          --gas-limit=5000000

  facet:collisions:
    desc: show the json formatted list of diamond facet collisions
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --collisions-only --format json || true

  facet:check:
    desc: show the json formatted list of diamond facet collisions
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --collisions-only
        # note exit status will be 1 if the exclude file doesn't reconcile all the collisions
        echo "ok"

  facet:list:
    desc: generate the deployable list of facets
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json

  facet:list-names:
    desc: generate the deployable list of facets
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i build/forge/out \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json | jq -r .[].name | tr -s '\n' ' '