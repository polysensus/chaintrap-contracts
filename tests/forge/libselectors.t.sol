// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import {Test} from "forge-std/Test.sol";
import {HEVM_ADDRESS} from "tests/constants.sol";
import {Vm} from "forge-std/Vm.sol";

import { LibSelectors } from "chaintrap/scriptlibs/libselectors.sol";

contract LibSelectors_listSelectors is Test {

  // For a known abi, test that we get hash same output
  function test_kat0_ERC1155ArenaFacet_listSelectors() public {
    Vm vm = Vm(HEVM_ADDRESS);

    bytes4[] memory got = LibSelectors.listSelectors(vm, "ERC1155ArenaFacet");
    bytes memory b = vm.parseBytes("0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000106dcfd8410000000000000000000000000000000000000000000000000000000000fdd58e000000000000000000000000000000000000000000000000000000004e1273f4000000000000000000000000000000000000000000000000000000003082d4b3000000000000000000000000000000000000000000000000000000007d5d894e00000000000000000000000000000000000000000000000000000000e985e9c50000000000000000000000000000000000000000000000000000000098afa55f000000000000000000000000000000000000000000000000000000002eb2c2d600000000000000000000000000000000000000000000000000000000f242432a00000000000000000000000000000000000000000000000000000000a22cb4650000000000000000000000000000000000000000000000000000000002fe53050000000000000000000000000000000000000000000000000000000001ffc9a70000000000000000000000000000000000000000000000000000000085bff2e70000000000000000000000000000000000000000000000000000000013ba55df00000000000000000000000000000000000000000000000000000000bd85b039000000000000000000000000000000000000000000000000000000000e89341c00000000000000000000000000000000000000000000000000000000");
    (bytes4[] memory expect) = abi.decode(b, (bytes4[]));

    bytes32 hGot = keccak256(abi.encode(got));
    bytes32 hExpect = keccak256(abi.encode(expect));
    assertEq(hGot, hExpect);
  }
}
